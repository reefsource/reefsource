"""
Django settings for reefsource project.

Generated by 'django-admin startproject' using Django 1.9.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import tempfile
from datetime import timedelta

import os
import psycopg2
from celery.schedules import crontab

from reefsource import __version__

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.abspath(os.path.dirname(__name__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'k&r81ss7rkpj%^zbhk-botbw^ky*3c)l!dd3!muqf3*f!oqe%&')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.getenv('DJANGO_DEBUG', '') == 'True' else False

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', 'reefsource.local,localhost').split(',')

# Application definition
PREREQ_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'debug_toolbar',

    'raven.contrib.django.raven_compat',

    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_swagger',

    'storages',

    'health_check',
    'health_check.db',
    'health_check.cache',
    'health_check.storage',

    'social_django',
]

PROJECT_APPS = [
    'reefsource.core',
    'reefsource.apps.users',
    'reefsource.apps.albums',

    'reefsource.apps.frontend',
]

INSTALLED_APPS = PREREQ_APPS + PROJECT_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',

    'debug_toolbar.middleware.DebugToolbarMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',

    'reefsource.core.middleware.ActiveUserMiddleware',

    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'social_django.middleware.SocialAuthExceptionMiddleware'
]

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

# STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

ROOT_URLCONF = 'reefsource.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'OPTIONS': {
            'debug': False,
            'loaders': [
                ('django.template.loaders.cached.Loader', [
                    'django.template.loaders.filesystem.Loader',
                    'django.template.loaders.app_directories.Loader',
                ]),
            ],
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'reefsource.core.context_processors.version'
            ],
        },
    },
]

if DEBUG:
    TEMPLATES[0]['OPTIONS']['debug'] = True
    TEMPLATES[0]['OPTIONS']['loaders'] = [
        'django.template.loaders.filesystem.Loader',
        'django.template.loaders.app_directories.Loader',
    ]

WSGI_APPLICATION = 'reefsource.wsgi.application'

AUTH_USER_MODEL = 'users.User'

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

# http://python-social-auth.readthedocs.io/en/latest/pipeline.html#authentication-pipeline
SOCIAL_AUTH_PIPELINE = (
    # Get the information we can about the user and return it in a simple
    # format to create the user instance later. On some cases the details are
    # already part of the auth response from the provider, but sometimes this
    # could hit a provider API.
    'social_core.pipeline.social_auth.social_details',

    # Get the social uid from whichever service we're authing thru. The uid is
    # the unique identifier of the given user in the provider.
    'social_core.pipeline.social_auth.social_uid',

    # Verifies that the current auth process is valid within the current
    # project, this is where emails and domains whitelists are applied (if
    # defined).
    'social_core.pipeline.social_auth.auth_allowed',

    # Checks if the current social-account is already associated in the site.
    'social_core.pipeline.social_auth.social_user',

    # Make up a username for this person, appends a random string at the end if
    # there's any collision.
    'social_core.pipeline.user.get_username',

    # Send a validation email to the user to verify its email address.
    # Disabled by default.
    # 'social_core.pipeline.mail.mail_validation',

    # Associates the current social details with another user account with
    # a similar email address. Disabled by default.
    'social_core.pipeline.social_auth.associate_by_email',

    # Create a user account if we haven't found one yet.
    'social_core.pipeline.user.create_user',

    # Create the record that associated the social account with this user.
    'social_core.pipeline.social_auth.associate_user',

    # Populate the extra_data field in the social record with the values
    # specified by settings (and the default ones like access_token, etc).
    'social_core.pipeline.social_auth.load_extra_data',

    # Update the user record with any changed info from the auth service.
    'social_core.pipeline.user.user_details',
)
# http://python-social-auth.readthedocs.io/en/latest/configuration/settings.html
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')
SOCIAL_AUTH_USER_MODEL = AUTH_USER_MODEL
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'
SOCIAL_AUTH_REDIRECT_IS_HTTPS = False

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
STATIC_ROOT = os.getenv('DJANGO_STATIC_ROOT', os.path.join(BASE_DIR, 'static'))
STATIC_URL = os.getenv('DJANGO_STATIC_URL', '/static/')

MEDIA_ROOT = os.getenv('DJANGO_MEDIA_ROOT', os.path.join(BASE_DIR, 'media'))
MEDIA_URL = os.getenv('DJANGO_MEDIA_URL', '/media/')

# SMTP
EMAIL_HOST = os.getenv('DJANGO_EMAIL_HOST', 'localhost')
EMAIL_HOST_USER = os.getenv('DJANGO_EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('DJANGO_EMAIL_HOST_PASSWORD', '')
EMAIL_PORT = os.getenv('DJANGO_EMAIL_PORT', '25')
EMAIL_USE_TLS = True if os.getenv('DJANGO_EMAIL_USE_TLS', '') == 'True' else False
EMAIL_USE_SSL = not EMAIL_USE_TLS
EMAIL_SUBJECT_PREFIX = ''
EMAIL_USE_LOCALTIME = False
EMAIL_TIMEOUT = 1
EMAIL_DEFAULT_FROM = os.getenv('DJANGO_EMAIL_DEFAULT_FROM', 'no-reply@localhost')


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB_NAME', 'reefsource'),
        'USER': os.getenv('POSTGRES_USER', 'reefsource'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'reefsource'),
        'HOST': os.getenv('POSTGRES_HOST', '127.0.0.1'),
        'PORT': os.getenv('POSTGRES_PORT_5432_TCP_PORT', 5432),
        'CONN_MAX_AGE': 600,
        'OPTIONS': {
            'isolation_level': psycopg2.extensions.ISOLATION_LEVEL_SERIALIZABLE,
        }
    }
}

REDIS_URI = 'redis://{host}:{port}/{db}'.format(
    host=os.getenv('REDIS_HOST', 'localhost'),
    port=os.getenv('REDIS_PORT_6379_TCP_PORT', 6379),
    db=os.getenv('REDIS_DB', 0)
)

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_URI,
        'KEY_PREFIX': 'reefsource-cache',
        'OPTIONS': {
            "PASSWORD": os.getenv('REDIS_PASSWORD', ''),
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            'PARSER_CLASS': 'redis.connection.HiredisParser',
#            'SERIALIZER': 'django_redis.serializers.json.JSONSerializer',
        },
    },
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"

SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 60 * 20 # 20 min
SESSION_SAVE_EVERY_REQUEST = True

# Celery
# todo librabbitmq doesn't work with celery 4.0
CELERY_BROKER_URL = 'amqp://%s:%s@%s:%s/%s' % (os.getenv('RABBIT_USER', 'reefsource'),
                                               os.getenv('RABBIT_PASSWORD', 'reefsource'),
                                               os.getenv('RABBIT_HOST', '127.0.0.1'),
                                               os.getenv('RABBIT_PORT', '5672'),
                                               os.getenv('RABBIT_VHOST', 'reefsourcecore'))
CELERY_RESULT_BACKEND = "redis"
CELERY_REDIS_HOST = os.getenv('REDIS_HOST', 'localhost')
CELERY_REDIS_PORT = os.getenv('REDIS_PORT_6379_TCP_PORT', 6379)
CELERY_REDIS_DB = os.getenv('REDIS_DB', 0)
CELERY_REDIS_PASSWORD = os.getenv('REDIS_PASSWORD', '')

CELERY_TASK_QUEUE_HA_POLICY = 'all'

CELERY_TASK_DEFAULT_QUEUE = "default"
CELERY_TASK_DEFAULT_EXCHANGE = "default"
CELERY_TASK_DEFAULT_EXCHANGE_TYPE = "direct"
CELERY_TASK_DEFAULT_ROUTING_KEY = "default"

from kombu import Queue

CELERY_TASK_QUEUES = [
    Queue('default', routing_key='default'),
]

for queue in CELERY_TASK_QUEUES:
    queue.durable = False

CELERY_TIMEZONE = 'America/Los_Angeles'
CELERY_BEAT_SCHEDULE = {}

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
    },
    'handlers': {
        'null': {
            'level': 'INFO',
            'class': 'logging.NullHandler',
        },
        'logfile': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logfile.log"),
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 2,
            'formatter': 'standard',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
    },
    'loggers': {
        'reefsource': {
            'handlers': ['console', ],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django': {
            'handlers': ['console', ],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console', ],
            'level': 'INFO',
            'propagate': False,
        },
        '': {
            'handlers': ['console', ],
            'level': 'INFO',
            'propagate': False,
        },
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.DjangoModelPermissions',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'reefsource.core.rest_framework.pagination.MyPageNumberPagination',
    'DATETIME_FORMAT': 'iso-8601',
    'COERCE_DECIMAL_TO_STRING': False
}

SWAGGER_SETTINGS = {
    'exclude_namespaces': [],
    'api_version': 'v1',
    'api_path': '/',
    'enabled_methods': [
        'get',
        'post',
        'put',
        'patch',
        'delete'
    ],
    'api_key': '',
    'is_authenticated': False,
    'is_superuser': False,
    'permission_denied_handler': None,
    'info': {
        'contact': 'api@reefsource.org',
        'description': 'API for the reefsource service',
        'license': '',
        'licenseUrl': '',
        'termsOfServiceUrl': '',
        'title': 'reefsource Swagger',
    },
    'doc_expansion': 'none',
}

# Django toolbar
DEBUG_TOOLBAR_CONFIG = {
    'JQUERY_URL': STATIC_URL + 'debug_toolbar/js/jquery.js'
}
DEBUG_TOOLBAR_PATCH_SETTINGS = False

RAVEN_CONFIG = {
    'dsn': os.getenv('RAVEN_DSN', ''),
    'release': __version__,
}
RAVEN_FRONTEND_CONFIG = {
    'dsn': os.getenv('RAVEN_DSN_FRONTEND', ''),
}
